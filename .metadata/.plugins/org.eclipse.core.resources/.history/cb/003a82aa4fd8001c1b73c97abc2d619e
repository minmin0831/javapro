package EJ01_Create_Destroy_Object;

public class StaticFactory {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	
	// 생성자 대신 정적 팩토리 메서드를 고려하라.
	// 클래스는 생성자와 별도로 정적 팩토리 메서드를 제공할 수 있다. 그 클래스의 인스턴스를 반환하는 단순한 정적 메서드 말이다. 
	
	// static factory method 
	public static Boolean valueOf(boolean b) {
		return b ? Boolean.TRUE : Boolean.FALSE;
	}
	
	// 정적 팩토리 메서드가 생성자보다 좋은 장점 5 가지 
	
	// 1. 이름을 가질 수 있다. 생성자에 넘기는 매새변수와 생성자 자체만으로는 반환될 객체의 특성을 제대로 설명하지 못한다. 반면 정적 팩토리는 이름만 잘 지으면 반환될 객체의 특성을 쉽게 묘사할 수 있다. 
	// 비교: BigInteger(int, int, Random)과 BigInteger.probablePrime 중 어느 쪽이 값이 소수인 BigInteger를 반환한다는 의미를 더 잘 설명하는 것 같은지 생각해보라. 
	
	// 2. 호출될 때마다 인스턴스를 새로 생성하지 않아도 된다. 이 덕분에 불변 클래스는 인스턴스를 미리 만들어 놓거나 새로 생성한 인스턴스를 캐싱하여 재활용하는 식으로 불필요한 객체 생성을 피할 수 있다. 
	// 예시: Boolean.valueOf(bool) 메서드는 객체를 아예 생성하지 않는다. 
	// 반복되는 요청에 같은 객체를 반환하는 식으로 정적 팩토리 방식의 클래스는 언제 어느 인스턴스를 살아 있게 할지 철저히 통제할 수 있다. 이런 클래스를 인스턴스 통제 클래스라 한다. 
	
	// 3. 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다. 
	
}
